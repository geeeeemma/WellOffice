// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WellOffice.Data;

#nullable disable

namespace WellOffice.Migrations
{
    [DbContext(typeof(WellOfficeContext))]
    [Migration("20250614141054_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WellOffice.Models.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UnitMeasure")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("WellOffice.Models.RemediationAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("RemediationActions");
                });

            modelBuilder.Entity("WellOffice.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CeilingHeight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Footage")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("WellOffice.Models.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.HasIndex("RoomId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("WellOffice.Models.SensorData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("WellOffice.Models.Threshold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AcceptableMaxValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AcceptableMinValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OptimalMaxValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OptimalMinValue")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.HasIndex("RoomId");

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("WellOffice.Models.RemediationAction", b =>
                {
                    b.HasOne("WellOffice.Models.Sensor", "Sensor")
                        .WithMany("RemediationActions")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("WellOffice.Models.Sensor", b =>
                {
                    b.HasOne("WellOffice.Models.Parameter", "Parameter")
                        .WithMany("Sensors")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WellOffice.Models.Room", "Room")
                        .WithMany("Sensors")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parameter");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WellOffice.Models.SensorData", b =>
                {
                    b.HasOne("WellOffice.Models.Sensor", "Sensor")
                        .WithMany("SensorData")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("WellOffice.Models.Threshold", b =>
                {
                    b.HasOne("WellOffice.Models.Parameter", "Parameter")
                        .WithMany("Thresholds")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WellOffice.Models.Room", "Room")
                        .WithMany("Thresholds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parameter");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WellOffice.Models.Parameter", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("Thresholds");
                });

            modelBuilder.Entity("WellOffice.Models.Room", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("Thresholds");
                });

            modelBuilder.Entity("WellOffice.Models.Sensor", b =>
                {
                    b.Navigation("RemediationActions");

                    b.Navigation("SensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
